// lib/features/factory/presentation/screens/work_orders_screen.dart

import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:intl/intl.dart';
import 'work_order_details_screen.dart';

/// ‡¶¨‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶° ‡¶™‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶ü (‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶æ‡¶Æ‡¶û‡ßç‡¶ú‡¶∏‡ßç‡¶Ø)
const Color _brandTeal  = Color(0xFF001863);
const Color _indigoCard = Color(0xFF0B2D9F);
const Color _surface    = Color(0xFFF4FBFB);
const Color _boardDark  = Color(0xFF0330AE);

enum _StatusFilter { all, pending, accepted, rejected }
enum _SortMode { newest, oldest }

class WorkOrdersScreen extends StatefulWidget {
  const WorkOrdersScreen({Key? key}) : super(key: key);

  @override
  State<WorkOrdersScreen> createState() => _WorkOrdersScreenState();
}

class _WorkOrdersScreenState extends State<WorkOrdersScreen> {
  final _firestore = FirebaseFirestore.instance;

  // ---------- UI State ----------
  String _search = '';                         // üîé ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü
  _StatusFilter _filter = _StatusFilter.all;   // üö¶ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞
  _SortMode _sort = _SortMode.newest;          // ‚ÜïÔ∏è ‡¶∏‡ßã‡¶∞‡ßç‡¶ü‡¶ø‡¶Ç ‡¶Æ‡ßã‡¶°

  // ---------- Actions ----------
  /// ‚úÖ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ
  Future<void> _acceptOrder(String id) async {
    final ok = await _confirm(
      title: '‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶¨‡ßá‡¶®?',
      message: '‡¶è‡¶ü‡¶ø ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡¶ü‡¶ø‡¶ï‡ßá ‚Äú‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶ï‡ßÉ‡¶§‚Äù ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶ö‡¶ø‡¶π‡ßç‡¶®‡¶ø‡¶§ ‡¶ï‡¶∞‡¶¨‡ßá‡•§',
      confirmText: '‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®',
      confirmColor: Colors.green,
    );
    if (ok != true) return;

    try {
      await _firestore.collection('work_orders').doc(id).update({
        'status': 'Accepted',
        'lastUpdated': FieldValue.serverTimestamp(),
      });
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá')),
        );
      }
    } catch (e) {
      _toast('‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: $e');
    }
  }

  /// ‚ùå ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ (‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂/‡¶ï‡¶æ‡¶∞‡¶£ ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ)
  Future<void> _rejectOrder(String id) async {
    final recCtl = TextEditingController();
    final ok = await showDialog<bool>(
      context: context,
      builder: (ctx) => AlertDialog(
        title: const Text('‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Align(
              alignment: Alignment.centerLeft,
              child: Text(
                '‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂/‡¶ï‡¶æ‡¶∞‡¶£ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® (‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï)',
                style: TextStyle(fontWeight: FontWeight.w600),
              ),
            ),
            const SizedBox(height: 8),
            TextField(
              controller: recCtl,
              decoration: const InputDecoration(
                hintText: '‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂/‡¶ï‡¶æ‡¶∞‡¶£ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‚Ä¶',
                border: OutlineInputBorder(),
              ),
              maxLines: 4,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(ctx).pop(false),
            child: const Text('‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®'),
          ),
          ElevatedButton(
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            onPressed: () {
              if (recCtl.text.trim().isEmpty) return;
              Navigator.of(ctx).pop(true);
            },
            child: const Text('‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§'),
          ),
        ],
      ),
    );

    if (ok != true) return;

    try {
      await _firestore.collection('work_orders').doc(id).update({
        'status': 'Rejected',
        'recommendation': recCtl.text.trim(),
        'lastUpdated': FieldValue.serverTimestamp(),
      });
      _toast('‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá');
    } catch (e) {
      _toast('‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: $e');
    }
  }

  /// ‚úÖ/‚ùå ‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ‡ßá‡¶∂‡¶® ‡¶°‡¶æ‡¶Ø‡¶º‡¶æ‡¶≤‡¶ó
  Future<bool?> _confirm({
    required String title,
    required String message,
    required String confirmText,
    Color? confirmColor,
  }) {
    return showDialog<bool>(
      context: context,
      builder: (ctx) => AlertDialog(
        title: Text(title),
        content: Text(message),
        actions: [
          TextButton(onPressed: () => Navigator.pop(ctx, false), child: const Text('‡¶®‡¶æ')),
          ElevatedButton(
            style: ElevatedButton.styleFrom(backgroundColor: confirmColor ?? _brandTeal),
            onPressed: () => Navigator.pop(ctx, true),
            child: Text(confirmText),
          ),
        ],
      ),
    );
  }

  /// üßÉ Snackbar ‡¶ü‡ßã‡¶∏‡ßç‡¶ü
  void _toast(String m) {
    if (!mounted) return;
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(m)));
  }

  // ---------- Helpers ----------
  /// üóìÔ∏è ‡¶ü‡¶æ‡¶á‡¶Æ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™ ‚Üí ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü
  String _formatTs(Timestamp? ts) {
    if (ts == null) return '‚Äî';
    final d = ts.toDate();
    return DateFormat('dd MMM, hh:mm a').format(d);
  }

  /// üé® ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ï‡¶æ‡¶≤‡¶æ‡¶∞
  Color _statusColor(String s) {
    switch (s.toLowerCase()) {
      case 'accepted':
        return Colors.green.shade600;
      case 'rejected':
        return Colors.red.shade600;
      case 'in_progress':
      case 'open':
      case 'pending':
      default:
        return Colors.orange.shade700;
    }
  }

  /// üî§ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏‡ßá‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü
  String _bnStatusText(String s) {
    switch (s.toLowerCase()) {
      case 'accepted':
        return '‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶ï‡ßÉ‡¶§';
      case 'rejected':
        return '‡¶¨‡¶æ‡¶§‡¶ø‡¶≤';
      case 'in_progress':
      case 'open':
      case 'pending':
      default:
        return '‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶Æ‡¶æ‡¶£';
    }
  }

  /// üîñ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ö‡¶ø‡¶™ (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ)
  Widget _statusChip(String status) {
    final c = _statusColor(status);
    final t = _bnStatusText(status);
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
      decoration: BoxDecoration(
        color: c.withOpacity(.12),
        border: Border.all(color: c.withOpacity(.35)),
        borderRadius: BorderRadius.circular(20),
      ),
      child: Text(
        t,
        style: TextStyle(color: c, fontWeight: FontWeight.w700, fontSize: 12),
      ),
    );
  }

  /// üö¶ ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶Æ‡¶ø‡¶≤ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø ‡¶®‡¶æ
  bool _matchesFilter(String status) {
    switch (_filter) {
      case _StatusFilter.all:
        return true;
      case _StatusFilter.pending:
        return (status.toLowerCase() == 'pending' ||
            status.toLowerCase() == 'open' ||
            status.toLowerCase() == 'in_progress');
      case _StatusFilter.accepted:
        return status.toLowerCase() == 'accepted';
      case _StatusFilter.rejected:
        return status.toLowerCase() == 'rejected';
    }
  }

  /// üîé ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶Æ‡¶ø‡¶≤
  bool _matchesSearch(String woNo, Map<String, dynamic> data) {
    if (_search.trim().isEmpty) return true;
    final q = _search.toLowerCase();
    final buf = StringBuffer();
    buf.write(woNo.toLowerCase());
    void add(Object? v) {
      if (v == null) return;
      buf.write(' ${v.toString().toLowerCase()}');
    }

    // ‚úÖ ‡¶ï‡¶Æ‡¶® ‡¶´‡¶ø‡¶≤‡ßç‡¶° ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö‡ßá ‡¶ß‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    add(data['title']);
    add(data['buyer']);
    add(data['department']);
    add(data['priority']);
    add(data['model']);
    add(data['assignedTo']);

    return buf.toString().contains(q);
  }

  // ---------- UI ----------
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: _surface,
      appBar: AppBar(
        backgroundColor: _brandTeal,
        foregroundColor: Colors.white,
        elevation: 0,
        title: const Text('‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞', style: TextStyle(fontWeight: FontWeight.w800)),
      ),
      body: StreamBuilder<QuerySnapshot<Map<String, dynamic>>>(
        // üîÅ ‡¶≤‡¶æ‡¶á‡¶≠ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßÄ‡¶Æ (‡¶ü‡¶æ‡¶á‡¶Æ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™-‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ)
        stream: _firestore.collection('work_orders').orderBy('timestamp', descending: true).snapshots(),
        builder: (ctx, snap) {
          if (snap.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }

          final docs = snap.data?.docs ?? [];

          // üìä ‡¶∏‡¶æ‡¶Æ‡¶æ‡¶∞‡¶ø ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶∏
          int total = docs.length;
          int pend = 0, acc = 0, rej = 0;
          for (final d in docs) {
            final st = (d.data()['status'] as String? ?? 'pending').toLowerCase();
            if (st == 'accepted') acc++;
            else if (st == 'rejected') rej++;
            else pend++;
          }

          // üîé ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ + ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö + ‡¶∏‡ßã‡¶∞‡ßç‡¶ü
          final items = docs.where((d) {
            final data = d.data();
            final status = data['status'] as String? ?? 'Pending';
            final woNo = data['workOrderNo'] as String? ?? d.id;
            return _matchesFilter(status) && _matchesSearch(woNo, data);
          }).toList()
            ..sort((a, b) {
              final at = (a.data()['timestamp'] as Timestamp?);
              final bt = (b.data()['timestamp'] as Timestamp?);
              final cmp = (at?.toDate() ?? DateTime(1970)).compareTo(bt?.toDate() ?? DateTime(1970));
              return _sort == _SortMode.newest ? -cmp : cmp;
            });

          return ListView(
            padding: const EdgeInsets.fromLTRB(16, 16, 16, 24),
            children: [
              // ===== üß≠ ‡¶ì‡¶≠‡¶æ‡¶∞‡¶≠‡¶ø‡¶â ‡¶¨‡ßã‡¶∞‡ßç‡¶° =====
              Container(
                padding: const EdgeInsets.fromLTRB(14, 16, 14, 14),
                decoration: BoxDecoration(color: _boardDark, borderRadius: BorderRadius.circular(20)),
                child: Wrap(
                  spacing: 12,
                  runSpacing: 12,
                  children: [
                    _smallStat('‡¶Æ‡ßã‡¶ü ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞', '$total', Icons.list_alt),
                    _smallStat('‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶Æ‡¶æ‡¶£', '$pend', Icons.timelapse),
                    _smallStat('‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶ï‡ßÉ‡¶§', '$acc', Icons.verified),
                    _smallStat('‡¶¨‡¶æ‡¶§‡¶ø‡¶≤', '$rej', Icons.block),
                  ],
                ),
              ),
              const SizedBox(height: 14),

              // ===== üîé ‡¶ü‡ßÅ‡¶≤‡¶¨‡¶æ‡¶∞: ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö + ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ + ‡¶∏‡ßã‡¶∞‡ßç‡¶ü =====
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      // Search
                      Expanded(
                        child: TextField(
                          onChanged: (v) => setState(() => _search = v),
                          decoration: InputDecoration(
                            hintText: '‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡ßÅ‡¶®: WO ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞, ‡¶ï‡ßç‡¶∞‡ßá‡¶§‡¶æ, ‡¶Æ‡¶°‡ßá‡¶≤‚Ä¶',
                            prefixIcon: const Icon(Icons.search),
                            filled: true,
                            fillColor: Colors.white,
                            contentPadding: const EdgeInsets.symmetric(vertical: 10),
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(12),
                              borderSide: BorderSide.none,
                            ),
                          ),
                        ),
                      ),
                      const SizedBox(width: 10),
                      // Filter
                      PopupMenuButton<_StatusFilter>(
                        tooltip: '‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞',
                        onSelected: (v) => setState(() => _filter = v),
                        itemBuilder: (context) => const [
                          PopupMenuItem(value: _StatusFilter.all, child: Text('‡¶∏‡¶¨')),
                          PopupMenuItem(value: _StatusFilter.pending, child: Text('‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶Æ‡¶æ‡¶£')),
                          PopupMenuItem(value: _StatusFilter.accepted, child: Text('‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶ï‡ßÉ‡¶§')),
                          PopupMenuItem(value: _StatusFilter.rejected, child: Text('‡¶¨‡¶æ‡¶§‡¶ø‡¶≤')),
                        ],
                        child: Container(
                          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 10),
                          decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Row(
                            children: [
                              const Icon(Icons.filter_list),
                              const SizedBox(width: 6),
                              Text(
                                _filter == _StatusFilter.all
                                    ? '‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞: ‡¶∏‡¶¨'
                                    : _filter == _StatusFilter.pending
                                    ? '‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞: ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶Æ‡¶æ‡¶£'
                                    : _filter == _StatusFilter.accepted
                                    ? '‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞: ‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶ï‡ßÉ‡¶§'
                                    : '‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞: ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤',
                                style: const TextStyle(fontWeight: FontWeight.w600),
                              ),
                              const Icon(Icons.arrow_drop_down),
                            ],
                          ),
                        ),
                      ),
                      const SizedBox(width: 10),
                      // Sort
                      PopupMenuButton<_SortMode>(
                        tooltip: '‡¶∏‡¶æ‡¶ú‡¶æ‡¶®',
                        onSelected: (v) => setState(() => _sort = v),
                        itemBuilder: (context) => const [
                          PopupMenuItem(value: _SortMode.newest, child: Text('‡¶®‡¶§‡ßÅ‡¶® ‡¶Ü‡¶ó‡ßá')),
                          PopupMenuItem(value: _SortMode.oldest, child: Text('‡¶™‡ßÅ‡¶∞‡ßã‡¶®‡ßã ‡¶Ü‡¶ó‡ßá')),
                        ],
                        child: Container(
                          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 10),
                          decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Row(
                            children: [
                              const Icon(Icons.sort),
                              const SizedBox(width: 6),
                              Text(
                                _sort == _SortMode.newest ? '‡¶∏‡¶æ‡¶ú‡¶æ‡¶®: ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ü‡¶ó‡ßá' : '‡¶∏‡¶æ‡¶ú‡¶æ‡¶®: ‡¶™‡ßÅ‡¶∞‡ßã‡¶®‡ßã ‡¶Ü‡¶ó‡ßá',
                                style: const TextStyle(fontWeight: FontWeight.w600),
                              ),
                              const Icon(Icons.arrow_drop_down),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 6),
                  // Helper line (Bengali explanation)
                  Text(
                    '‡¶á‡¶ô‡ßç‡¶ó‡¶ø‡¶§: ‡¶ì‡¶™‡¶∞‡ßá‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö/‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞/‡¶∏‡¶æ‡¶ú‡¶æ‡¶® ‡¶¨‡¶¶‡¶≤‡¶æ‡¶≤‡ßá‡¶á ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶æ‡¶•‡ßá ‡¶¨‡¶¶‡¶≤‡¶æ‡¶¨‡ßá‡•§',
                    style: TextStyle(color: Colors.grey[700], fontSize: 12, fontWeight: FontWeight.w600),
                  ),
                ],
              ),
              const SizedBox(height: 16),

              if (items.isEmpty)
                Container(
                  padding: const EdgeInsets.all(24),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(14),
                    border: Border.all(color: Colors.black12),
                  ),
                  child: const Center(
                    child: Text('‡¶ï‡ßã‡¶®‡ßã ‡¶Æ‡¶ø‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§'),
                  ),
                ),

              // ===== üìÑ ‡¶ï‡¶æ‡¶∞‡ßç‡¶°‡¶∏‡¶Æ‡ßÇ‡¶π =====
              ...items.map((doc) {
                final data  = doc.data();
                final woNo  = data['workOrderNo'] as String? ?? doc.id;
                final status= data['status'] as String? ?? 'Pending';
                final ts    = data['timestamp'] as Timestamp?;
                final last  = data['lastUpdated'] as Timestamp?;
                final buyer = data['buyer'] as String?;            // optional
                final dept  = data['department'] as String?;       // optional
                final title = data['title'] as String?;            // optional
                final model = data['model'] as String?;            // optional
                final qty   = data['quantity'] as num?;            // optional
                final prio  = data['priority'] as String?;         // optional
                final assg  = data['assignedTo'] as String?;       // optional
                final rec   = data['recommendation'] as String?;   // optional

                return Container(
                  margin: const EdgeInsets.only(bottom: 12),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(14),
                    boxShadow: const [BoxShadow(color: Colors.black12, blurRadius: 4, offset: Offset(0, 2))],
                    border: Border.all(color: Colors.black12),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // gradient header
                      Container(
                        width: double.infinity,
                        padding: const EdgeInsets.symmetric(horizontal: 14, vertical: 12),
                        decoration: const BoxDecoration(
                          borderRadius: BorderRadius.vertical(top: Radius.circular(14)),
                          gradient: LinearGradient(
                            colors: [_indigoCard, Color(0xFF1D5DF1)],
                            begin: Alignment.topLeft,
                            end: Alignment.bottomRight,
                          ),
                        ),
                        child: Row(
                          children: [
                            Expanded(
                              child: Text(
                                woNo,
                                style: const TextStyle(
                                  color: Colors.white,
                                  fontWeight: FontWeight.w800,
                                  fontSize: 16,
                                ),
                                overflow: TextOverflow.ellipsis,
                              ),
                            ),
                            _statusChip(status),
                          ],
                        ),
                      ),

                      // content
                      Padding(
                        padding: const EdgeInsets.fromLTRB(14, 12, 14, 8),
                        child: Column(
                          children: [
                            _kvRow('‡¶∂‡¶ø‡¶∞‡ßã‡¶®‡¶æ‡¶Æ', title),
                            _kvRow('‡¶ï‡ßç‡¶∞‡ßá‡¶§‡¶æ', buyer),
                            _kvRow('‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó', dept),
                            _kvRow('‡¶Æ‡¶°‡ßá‡¶≤', model),
                            _kvRow('‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£', qty == null ? null : qty.toStringAsFixed(0)),
                            _kvRow('‡¶Ö‡¶ó‡ßç‡¶∞‡¶æ‡¶ß‡¶ø‡¶ï‡¶æ‡¶∞', prio),
                            _kvRow('‡¶¶‡¶æ‡¶Ø‡¶º‡¶ø‡¶§‡ßç‡¶¨‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§', assg),
                            _kvRow('‡¶§‡ßà‡¶∞‡¶ø‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º', _formatTs(ts)),
                            _kvRow('‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡¶π‡¶æ‡¶≤‡¶®‡¶æ‡¶ó‡¶æ‡¶¶', _formatTs(last)),
                            if (rec != null && rec.isNotEmpty) _kvRow('‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂', rec, multi: true),
                          ],
                        ),
                      ),

                      const Divider(height: 1),
                      Padding(
                        padding: const EdgeInsets.fromLTRB(12, 8, 12, 12),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            // Bengali helper line above actions
                            Text(
                              '‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶®: ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶ó‡ßç‡¶∞‡¶π‡¶£/‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®‡•§',
                              style: TextStyle(color: Colors.grey[700], fontSize: 12, fontWeight: FontWeight.w600),
                            ),
                            const SizedBox(height: 8),
                            Wrap(
                              spacing: 8,
                              runSpacing: 8,
                              children: [
                                if (status.toLowerCase() != 'accepted' && status.toLowerCase() != 'rejected') ...[
                                  ElevatedButton.icon(
                                    style: ElevatedButton.styleFrom(
                                      backgroundColor: Colors.green.shade600,
                                      foregroundColor: Colors.white,
                                    ),
                                    onPressed: () => _acceptOrder(doc.id),
                                    icon: const Icon(Icons.check_circle),
                                    label: const Text('‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®'),
                                  ),
                                  ElevatedButton.icon(
                                    style: ElevatedButton.styleFrom(
                                      backgroundColor: Colors.red.shade600,
                                      foregroundColor: Colors.white,
                                    ),
                                    onPressed: () => _rejectOrder(doc.id),
                                    icon: const Icon(Icons.cancel),
                                    label: const Text('‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®'),
                                  ),
                                  OutlinedButton.icon(
                                    onPressed: () {
                                      Navigator.push(
                                        context,
                                        MaterialPageRoute(builder: (_) => WorkOrderDetailsScreen(orderId: doc.id)),
                                      );
                                    },
                                    icon: const Icon(Icons.open_in_new),
                                    label: const Text('‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§'),
                                  ),
                                ] else if (status.toLowerCase() == 'accepted') ...[
                                  ElevatedButton.icon(
                                    style: ElevatedButton.styleFrom(
                                      backgroundColor: _brandTeal,
                                      foregroundColor: Colors.white,
                                    ),
                                    onPressed: () {
                                      Navigator.push(
                                        context,
                                        MaterialPageRoute(builder: (_) => WorkOrderDetailsScreen(orderId: doc.id)),
                                      );
                                    },
                                    icon: const Icon(Icons.update),
                                    label: const Text('‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®'),
                                  ),
                                  OutlinedButton.icon(
                                    onPressed: () {
                                      Navigator.push(
                                        context,
                                        MaterialPageRoute(builder: (_) => WorkOrderDetailsScreen(orderId: doc.id)),
                                      );
                                    },
                                    icon: const Icon(Icons.description),
                                    label: const Text('‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§'),
                                  ),
                                ] else ...[
                                  OutlinedButton.icon(
                                    onPressed: () {
                                      Navigator.push(
                                        context,
                                        MaterialPageRoute(builder: (_) => WorkOrderDetailsScreen(orderId: doc.id)),
                                      );
                                    },
                                    icon: const Icon(Icons.description),
                                    label: const Text('‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§'),
                                  ),
                                ],
                              ],
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                );
              }),
            ],
          );
        },
      ),
    );
  }

  // üî¢ ‡¶ì‡¶≠‡¶æ‡¶∞‡¶≠‡¶ø‡¶â ‡¶¨‡ßã‡¶∞‡ßç‡¶°‡ßá‡¶∞ ‡¶õ‡ßã‡¶ü ‡¶ï‡¶æ‡¶∞‡ßç‡¶°
  Widget _smallStat(String title, String value, IconData icon) {
    return Container(
      width: 210,
      height: 90,
      padding: const EdgeInsets.all(14),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(14),
      ),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.end,
        children: [
          Container(
            width: 36, height: 36,
            decoration: BoxDecoration(color: Colors.black.withOpacity(.85), shape: BoxShape.circle),
            child: Icon(icon, color: Colors.white, size: 18),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.end,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(value,
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                    style: const TextStyle(fontWeight: FontWeight.w900, fontSize: 22)),
                const SizedBox(height: 2),
                Text(title, style: const TextStyle(fontWeight: FontWeight.w600, fontSize: 12)),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // üîë-üî∏ ‡¶ï‡ßÄ-‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ ‡¶∏‡¶æ‡¶∞‡¶ø (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≤‡ßá‡¶¨‡ßá‡¶≤)
  Widget _kvRow(String k, String? v, {bool multi = false}) {
    final value = (v == null || v.isEmpty) ? '‚Äî' : v;
    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: Row(
        crossAxisAlignment: multi ? CrossAxisAlignment.start : CrossAxisAlignment.center,
        children: [
          SizedBox(
            width: 120,
            child: Text(
              k,
              style: TextStyle(color: Colors.grey[700], fontWeight: FontWeight.w700),
            ),
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(fontWeight: FontWeight.w600),
              maxLines: multi ? 4 : 1,
              overflow: multi ? TextOverflow.visible : TextOverflow.ellipsis,
            ),
          ),
        ],
      ),
    );
  }
}
